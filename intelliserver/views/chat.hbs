<!doctype html>
<html lang="en">

<head>
  <title>IntelliServer</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
  <link rel="stylesheet" href="/stylesheets/style.css">
</head>

<body>
  <header>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
      <div class="container">
        <a class="navbar-brand" href="/"><img src="/assets/logo.png" alt="">IntelliServer</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarText"
          aria-controls="navbarText" aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarText">
          <ul class="navbar-nav me-auto mb-2 mb-lg-0">
            <li class="nav-item">
              <a class="nav-link active" aria-current="page" href="http://localhost/api-docs/">Docs</a>
            </li>
            <!-- <li class="nav-item">
              <a class="nav-link active" aria-current="page" href="#">Playground</a>
            </li> -->
          </ul>
          <span class="navbar-text sideBaricon cursor-pointer ">
            <button id="slideBtn" class="btn btn-toggle">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-6 w-6">
                <rect width="18" height="18" x="3" y="3" rx="2" ry="2"></rect>
                <path fill="'#fff" d="M9 3v18"></path>
                <path d="m16 15-3-3 3-3"></path>
              </svg>
            </button>
          </span>
        </div>
      </div>
    </nav>
  </header>
  <section>
    <div class="container">
      <div class="chatbox-container">
        <div class="chat-section" id="chatbox">
        </div>
        <div class="input-group mb-3 chat-mesasge">
          <input type="text" class="form-control" placeholder="Search" id="userInput" aria-label="Recipient's username"
            aria-describedby="basic-addon2">
          <button class="input-group-text btn btn-primary submit-button " id="sendMessage">Submit</button>
        </div>
      </div>
    </div>
  </section>
  <section class="side-bar">
    <div class="row">
      <div class="col-12">
        <form class="row g-3" id="chatbot-form">
          <div class="col-md-12">
            <label for="inputEmail4" class="form-label">System Message</label>
            <input type="text" class="form-control" id="systemMessage">
          </div>
          <div class="col-md-12">
            <div class="flex justify-content-between">
              <label for="inputPassword4" class="form-label">Number of Messages</label>
              <button type="button" class="btn btn-ghost ms-auto" id="dds" data-bs-toggle="tooltip"
                data-class="custom-tooltip" data-bs-placement="top"
                title="The number of messages to include in a request. The higher the number, the more context the Al will have to work with.">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="24" viewBox="0 0 24 24" fill="none"
                  stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                  class="lucide lucide-info">
                  <circle cx="12" cy="12" r="10" fill="#fff"></circle>
                  <path d="M12 16v-4"></path>
                  <path d="M12 8h.01"></path>
                </svg>
              </button>
            </div>

            <input type="number" name="number" class="form-control" id="numberOfMessage" min="3" value="3">
          </div>
          <div class="col-12">
            <label for="inputAddress" class="form-label">Provider</label>
            <select id="provider" class="form-select">
              <option selected value="openai">Open AI</option>
              <option value="replicate">Replicate</option>
              <option value="cohere">Cohere</option>
              <option value="mistral">Mistral</option>
            </select>
          </div>
          <div id="model-container" class="col-12">
            <label for="inputAddress" class="form-label">Model</label>
            <select id="model" class="form-select">
              <option selected value="gpt3.5" data-providers="openai">gpt-3.5-turbo</option>
              <option value="gpt4" data-providers="openai ">gpt-4</option>
              <option value="70b-chat" data-providers="replicate">70b Chat</option>
              <option value="13b-chat" data-providers="replicate">13b Chat</option>
              <option value="mistral-medium" data-providers="mistral">mistral medium</option>
            </select>
          </div>
          <div class="col-12">
            <label for="inputAddress2" class="form-label">Api Key</label>
            <input type="password" class="form-control" name="apiKey" id="apiKey" placeholder="Api Key">
          </div>

          <div class="col-12 d-flex justify-content-between align-items-center">
            <div class="form-check form-switch" id="data-option">
              <label class="form-check-label" for="flexSwitchCheckDefault">Connect Data</label>
              <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault">
            </div>
            <button type="button" class="btn btn-ghost ms-auto" data-bs-toggle="tooltip" data-bs-placement="top"
              title="When enabled, the chatbot will use your data in the conversation. To upload your documents go to intellinode.ai">
              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="24" viewBox="0 0 24 24" fill="none"
                stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                class="lucide lucide-info">
                <circle cx="12" cy="12" r="10" fill="#fff"></circle>
                <path d="M12 16v-4"></path>
                <path d="M12 8h.01"></path>
              </svg>
            </button>
          </div>
          <div id="additionalOptions" class="formOptions" style="display: none;">
            <label for="additionalKey" class="form-label">One Key</label>
            <input id="oneKey" type="password" class="form-control" id="additionalKey" placeholder="Enter key">
            <label for="additionalK" class="form-label">Context size</label>
            <input id="searchK" type="number" class="form-control" id="additionalK" min="1" value="3">
          </div>

          <div class="col-12 d-flex justify-content-between">
            <button type="submit" class="btn btn-primary">Save</button>
            <button class="btn btn-secondary" id="resetKeys">Reset Keys</button>
          </div>
        </form>
      </div>
    </div>
  </section>


  <!-- 
  <h1>IntelliServer</h1>
  <p>Access AI models as microservice with IntelliServer.</p>

  <p><a href="https://github.com/intelligentnode/IntelliServer">Visit the GitHub repository.</a></p>

  <p><a href="https://github.com/intelligentnode/IntelliServer/wiki">Check the documentation.</a></p> -->
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
    crossorigin="anonymous"></script>

  <script>
    // Function to dynamically update the model options based on the selected provider
    function updateModelOptions() {

      const selectedProvider = $('#provider').val();
      const modelDropdown = $('#model');
      if (localStorage.apiKey) {
        $('#apiKey').val(localStorage.getItem('apiKey'));
      }
      if (selectedProvider === 'cohere') {
        // Hide the Model select field and remove its value
        $('#model-container').hide();
        $('#model').val('');
      } else {
        // Show the Model select field
        $('#model-container').show();

        // Clear existing options
        modelDropdown.empty();

        // Define model options based on the selected provider
        const modelOptions = {
          openai: [
            { value: 'gpt3.5', text: 'gpt-3.5-turbo' },
            { value: 'gpt4', text: 'gpt-4' },
          ],
          replicate: [
            { value: '70b-chat', text: '70b Chat' },
            { value: '13b-chat', text: '13b Chat' },
          ],
          cohere: [], // Empty array for Cohere
          mistral: [
            {value: 'mistral-medium', text: 'mistral medium'}
          ]
        };

        // Populate the Model dropdown with options based on the selected provider
        modelOptions[selectedProvider].forEach(option => {
          modelDropdown.append($('<option>', {
            value: option.value,
            text: option.text,
            'data-providers': selectedProvider // Add data-providers attribute
          }));
        });

        // Toggle the visibility of Model options based on data-providers attribute
        $('#model option').each(function () {
          const allowedProviders = $(this).data('providers');

          if (allowedProviders) {
            const providersArray = allowedProviders.split(' ');

            if (providersArray.includes(selectedProvider)) {
              $(this).show(); // Show the option
            } else {
              $(this).hide(); // Hide the option
            }
          } else {
            // Handle the case where data-providers attribute is undefined or null
            // You can choose to show or hide the option based on your requirements
            $(this).hide(); // For example, hide the option
          }
        });
      }
    }

    // Call the updateModelOptions function on page load
    updateModelOptions();

    // Handle the change event of the provider select field
    $('#provider').on('change', function () {
      updateModelOptions();
    });

    const form = $('#chatbot-form');
    // Load saved values from local storage when the page loads
    loadValues();
    // Form submission event
    form.submit(function (e) {
      e.preventDefault();
      const systemMessage = $('#systemMessage').val();
      const numberOfMessages = $('#numberOfMessage').val();
      const provider = $('#provider').val();
      const model = $('#model').val();
      const apiKey = $('#apiKey').val();
      const contextMode = $('#flexSwitchCheckDefault').prop('checked');
      const apiKeyField = $('#apiKey');
      // ---
      const oneKey = $('#oneKey').val();
      const searchK = $('#searchK').val();

      if (apiKey.trim() === '') {
        // API key is empty, display error message and change border color
        apiKeyField.addClass('is-invalid');
        apiKeyField.siblings('.invalid-feedback').text('API Key cannot be empty.');
      } else {
        // API key is not empty, save values and reset the form
        apiKeyField.removeClass('is-invalid');
        apiKeyField.siblings('.invalid-feedback').text('');
        saveValuesToLocalStorage(systemMessage, numberOfMessages, provider, model, apiKey, contextMode, oneKey, searchK);
        $('.side-bar').removeClass('active');
        // form[0].reset();
      }
    });

    // Reset Keys button click event
    $('#resetKeys').click(function () {
      localStorage.removeItem('systemMessage');
      localStorage.removeItem('numberOfMessages');
      localStorage.removeItem('provider');
      localStorage.removeItem('model');
      localStorage.removeItem('apiKey');
      localStorage.removeItem('contextMode');
      localStorage.removeItem('oneKey');
      localStorage.removeItem('searchK');

      // Reset the form fields to their default values
      form[0].reset();
      $('#apiKey').removeClass('is-invalid'); // Remove error styling
      $('#apiKey').siblings('.invalid-feedback').text(''); // Clear error message
    });

    // Function to save values to local storage
    function saveValuesToLocalStorage(systemMessage, numberOfMessages, provider, model, apiKey, contextMode, oneKey, searchK) {
      localStorage.setItem('systemMessage', systemMessage);
      localStorage.setItem('numberOfMessages', numberOfMessages);
      localStorage.setItem('provider', provider);
      localStorage.setItem('model', model);
      localStorage.setItem('apiKey', apiKey);
      localStorage.setItem('contextMode', contextMode);

      // Only save oneKey and searchK if "Connect Data" is enabled
      if (contextMode && oneKey) {
        localStorage.setItem('oneKey', oneKey);
        localStorage.setItem('searchK', searchK);
      } else {
        localStorage.removeItem('oneKey');
        localStorage.removeItem('searchK');
      }
    }

    // Function to load values from local storage and populate input fields
    function loadValues() {
      // Load values from local storage and populate input fields
      const savedSystemMessage = localStorage.getItem('systemMessage');
      const savedNumberOfMessages = localStorage.getItem('numberOfMessages');
      const savedProvider = localStorage.getItem('provider');
      const savedModel = localStorage.getItem('model');
      const savedApiKey = localStorage.getItem('apiKey');
      const savedContextMode = localStorage.getItem('contextMode');
      // ---
      const oneKey = localStorage.getItem('oneKey');
      const searchK = localStorage.getItem('searchK');

      if (savedSystemMessage) {
        $('#systemMessage').val(savedSystemMessage);
        $('#numberOfMessage').val(savedNumberOfMessages);
        $('#provider').val(savedProvider);
        $('#model').val(savedModel);
        $('#apiKey').val(savedApiKey);
        $('#flexSwitchCheckDefault').prop('checked', savedContextMode === 'true');
        if (oneKey) {
          $('#oneKey').val(oneKey);
          $('#searchK').val(searchK);
        }
      }
    }
  </script>
  <script>
    // Function to toggle the visibility of the "Context" option
    function toggleContextOptionVisibility() {
      const providerSelect = document.getElementById('provider');
      const dataOption = document.getElementById('data-option');

      if (providerSelect.value === 'replicate') {
        dataOption.style.display = 'none'; // Hide the "Context" option
      } else {
        dataOption.style.display = 'block'; // Show the "Context" option
      }
    }

    // Add an event listener to the provider select field
    document.getElementById('provider').addEventListener('change', toggleContextOptionVisibility);

    // Call the toggleContextOptionVisibility function on page load to set the initial state
    toggleContextOptionVisibility();
  </script>
  <script>
    var messageHistory = [];
    $(document).ready(function () {
      // Function to enable/disable the button and show/hide loader
      function toggleButtonState(isEnabled) {
        $('#sendMessage').prop('disabled', !isEnabled);
        $('#sendMessage').html(isEnabled ? 'Send Message' : '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Sending...');
      }

      // Function to display an error message to the user
      function displayErrorMessage(errorMessage) {
        const chatbox = $('#chatbox');
        const errorBubble = $('<div>').addClass('error-bubble').text('Error: ' + errorMessage);
        chatbox.append(errorBubble);
        chatbox.scrollTop(chatbox.prop("scrollHeight"));
      }

      // Function to send the message to the API and handle the response
      function sendMessageToApi() {
          toggleButtonState(false);
          const userInput = $('#userInput').val();

          if ($.trim(userInput) !== '') {
            const chatbox = $('#chatbox');
            // Retrieve values from local storage
            const apiKey = localStorage.getItem('apiKey');
            const model = localStorage.getItem('model');
            const provider = localStorage.getItem('provider');
            const oneKey = localStorage.getItem('oneKey');
            const systemMessage = localStorage.getItem('systemMessage') || "";
            let searchK = localStorage.getItem('searchK') || 3;

            if (!apiKey) {
              displayErrorMessage('Please enter a valid API key.');
              toggleButtonState(true);
              return;
            }

            // Append the user's message
            const userBubble = $('<div>').addClass('user-bubble').text(userInput);
            chatbox.append(userBubble);
            // Add a temporary bot "typing" bubble
            const botBubbleBefore = $('<div>').addClass('bot-bubble bot-typing');
            chatbox.append(botBubbleBefore);

            // Prepare the conversation history
            messageHistory.push({
              role: "user",
              content: userInput
            });

            // Validate searchK value
            if (isNaN(Number(searchK)) || Number(searchK) < 1) {
              searchK = 3;
            }

            // Prepare the data payload;
            let data = {};
            if (oneKey) {
              data = {
                api_key: apiKey,
                one_key: oneKey,
                model: model,
                provider: provider,
                input: {
                  system: systemMessage,
                  searchK: searchK,
                  attachReference: true,
                  messages: messageHistory
                }
              };
            } else {
              data = {
                api_key: apiKey,
                model: model,
                provider: provider,
                input: {
                  system: "You are a helpful assistant.",
                  messages: messageHistory
                }
              };
            }

            $('#userInput').val('');
            const baseUrl = window.location.origin;
            const apiUrl = `${baseUrl}/chatbot/chat`;

            $.ajax({
              url: apiUrl,
              type: 'POST',
              headers: {
                'X-API-KEY': "root",
                'Content-Type': 'application/json',
              },
              data: JSON.stringify(data),
              success: function (response) {
                botBubbleBefore.remove();
                if (response.status === 'ERROR') {
                  displayErrorMessage(response.message);
                } else {
                  // Get the chatbot response (first element of response.data)
                  const botResponse = response.data[0];
                  messageHistory.push({
                    role: "assistant",
                    content: botResponse
                  });
                  const botResponseLines = botResponse.split('\n');
                  // Create the chat bubble with the bot's response
                  const botBubble = $('<div>').addClass('bot-bubble').html(botResponseLines.join('<br>'));

                  // If oneKey was used and references are provided, add a "Source" button
                  if (oneKey && response.reference && response.reference.length > 0) {
                    const sourceButton = $('<button>')
                      .addClass('btn btn-link source-btn')
                      .text('Source')
                      .on('click', function () {
                        // Toggle display of the source list
                        let sourceDiv = $(this).siblings('.source-list');
                        if (sourceDiv.length) {
                          sourceDiv.toggle();
                        } else {
                          sourceDiv = $('<div>')
                            .addClass('source-list alert alert-secondary mt-2')
                            .css({ "font-size": "0.85em" })
                            .html("Sources: " + response.reference.join(', '));
                          $(this).after(sourceDiv);
                        }
                      });
                    // Append the button (and a line break) to the bot bubble
                    botBubble.append('<br>').append(sourceButton);
                  }

                  chatbox.append(botBubble);
                  chatbox.scrollTop(chatbox.prop("scrollHeight"));
                }
                toggleButtonState(true);
              },
              error: function (xhr, status, error) {
                console.error('Error:', error);
                displayErrorMessage('An unexpected error occurred.');
                toggleButtonState(true);
              }
            });
          } else {
            toggleButtonState(true); // Re-enable button if input is empty
          }
        }


      $('#userInput').keypress(function (event) {
        if (event.keyCode === 13) {
          event.preventDefault();
          sendMessageToApi();
        }
      });
      $('#sendMessage').on('click', function () {
        sendMessageToApi();
      });

      // Check if the checkbox is checked on page load to determine whether to show the additional fields
      if ($('#flexSwitchCheckDefault').is(':checked')) {
        $('#additionalOptions').show();
      }

      // Event listener for the 'Connect Data' checkbox
      $('#flexSwitchCheckDefault').change(function () {
        // toggle the display of the additional fields based on the checkbox state
        if (this.checked) {
          $('#additionalOptions').slideDown(); // Show the fields with a slide-down effect
        } else {
          $('#additionalOptions').slideUp(); // Hide the fields with a slide-up effect
        }
      });

      // Event listener for slider button
      $('#slideBtn').on('click', function () {
        setTimeout(() => loadValues(), 0);
      });

    });

  </script>

  <script>
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
      return new bootstrap.Tooltip(tooltipTriggerEl)
    })

    $(".sideBaricon").on("click", function () {
      $(".side-bar").toggleClass("active"); // Toggle the "active" class on the sidebar   
    });
  </script>


</body>

</html>