<!doctype html>
<html lang="en">
<head>
  <title>IntelliServer</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
  <link rel="stylesheet" href="/stylesheets/style.css">
</head>
<body>
  <header>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
      <div class="container">
        <a class="navbar-brand" href="/"><img src="/assets/logo.png" alt="">IntelliServer</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarText"
          aria-controls="navbarText" aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarText">
          <ul class="navbar-nav me-auto mb-2 mb-lg-0">
            <li class="nav-item">
              <a class="nav-link active" aria-current="page" href="http://localhost/api-docs/">Docs</a>
            </li>
          </ul>
          <span class="navbar-text sideBaricon cursor-pointer">
            <button id="slideBtn" class="btn btn-toggle">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-6 w-6">
                <rect width="18" height="18" x="3" y="3" rx="2" ry="2"></rect>
                <path fill="#fff" d="M9 3v18"></path>
                <path d="m16 15-3-3 3-3"></path>
              </svg>
            </button>
          </span>
        </div>
      </div>
    </nav>
  </header>
  <section>
    <div class="container">
      <div class="chatbox-container">
        <div class="chat-section" id="chatbox"></div>
        <div class="input-group mb-3 chat-mesasge">
          <input type="text" class="form-control" placeholder="Search" id="userInput" aria-label="Recipient's username" aria-describedby="basic-addon2">
          <button class="input-group-text btn btn-primary submit-button" id="sendMessage">Submit</button>
        </div>
      </div>
    </div>
  </section>
  <section class="side-bar">
    <div class="row">
      <div class="col-12">
        <form class="row g-3" id="chatbot-form">
          <div class="col-md-12">
            <label for="systemMessage" class="form-label">System Message</label>
            <input type="text" class="form-control" id="systemMessage">
          </div>
          <div class="col-md-12">
            <div class="d-flex justify-content-between">
              <label class="form-label">Number of Messages</label>
              <button type="button" class="btn btn-ghost ms-auto" id="dds" data-bs-toggle="tooltip" data-bs-placement="top"
                title="The number of messages to include in a request. The higher the number, the more context the AI will have.">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="24" viewBox="0 0 24 24" fill="none"
                  stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-info">
                  <circle cx="12" cy="12" r="10" fill="#fff"></circle>
                  <path d="M12 16v-4"></path>
                  <path d="M12 8h.01"></path>
                </svg>
              </button>
            </div>
            <input type="number" class="form-control" id="numberOfMessage" min="3" value="3">
          </div>
          <div class="col-12">
            <label for="provider" class="form-label">Provider</label>
            <select id="provider" class="form-select">
              <option selected value="openai">Open AI</option>
              <option value="anthropic">Anthropic</option>
              <option value="replicate">Replicate</option>
              <option value="cohere">Cohere</option>
              <option value="mistral">Mistral</option>
              <option value="vllm">vLLM</option>
            </select>
          </div>
          <div id="model-dropdown-container" class="col-12">
            <label for="model" class="form-label">Model</label>
            <select id="model" class="form-select"></select>
          </div>
          <div id="vllm-container" class="col-12" style="display: none;">
            <label for="vllmServer" class="form-label">vLLM Server URL</label>
            <input type="text" class="form-control" id="vllmServer" placeholder="http://localhost:8000">
            <label for="vllmModel" class="form-label mt-2">vLLM Model Name</label>
            <input type="text" class="form-control" id="vllmModel" placeholder="Enter vLLM model name">
          </div>
          <div class="col-12">
            <label for="apiKey" class="form-label">Api Key</label>
            <input type="password" class="form-control" id="apiKey" placeholder="Api Key">
          </div>
          <div class="col-12 d-flex justify-content-between align-items-center" id="data-option">
            <div class="form-check form-switch">
              <label class="form-check-label" for="flexSwitchCheckDefault">Connect Data</label>
              <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault">
            </div>
            <button type="button" class="btn btn-ghost" data-bs-toggle="tooltip" data-bs-placement="top"
              title="When enabled, the chatbot will use your data in the conversation. To upload your documents go to intellinode.ai">
              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="24" viewBox="0 0 24 24" fill="none"
                stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-info">
                <circle cx="12" cy="12" r="10" fill="#fff"></circle>
                <path d="M12 16v-4"></path>
                <path d="M12 8h.01"></path>
              </svg>
            </button>
          </div>
          <div id="additionalOptions" class="formOptions" style="display: none;">
            <label for="oneKey" class="form-label">One Key</label>
            <input id="oneKey" type="password" class="form-control" placeholder="Enter key">
            <label for="searchK" class="form-label">Context Size</label>
            <input id="searchK" type="number" class="form-control" min="1" value="3">
          </div>
          <div class="col-12 d-flex justify-content-between">
            <button type="submit" class="btn btn-primary">Save</button>
            <button type="button" class="btn btn-secondary" id="resetKeys">Reset Keys</button>
          </div>
        </form>
      </div>
    </div>
  </section>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
  <script>
    const modelOptions = {
      openai: [
        { value: 'gpt-4o', text: 'gpt-4o' },
        { value: 'o3-mini', text: 'o3-mini' },
        { value: 'gpt4', text: 'gpt-4' }
      ],
      anthropic: [
        { value: 'claude-3-7-sonnet-latest', text: 'claude-3-7-sonnet-latest' },
        { value: 'claude-3-5-haiku-latest', text: 'claude-3-5-haiku-latest' }
      ],
      replicate: [
        { value: '70b-chat', text: '70b Chat' },
        { value: '13b-chat', text: '13b Chat' }
      ],
      mistral: [
        { value: 'mistral-large-latest', text: 'mistral-large-latest' },
        { value: 'mistral-saba-latest', text: 'mistral-saba-latest' },
        { value: 'mistral-medium', text: 'mistral medium' }
      ]
    };

    function updateModelOptions() {
      const selectedProvider = $('#provider').val();
      if (localStorage.apiKey) {
        $('#apiKey').val(localStorage.getItem('apiKey'));
      }
      if (selectedProvider === 'cohere') {
        $('#model-dropdown-container').hide();
        $('#vllm-container').hide();
      } else if (selectedProvider === 'vllm') {
        $('#model-dropdown-container').hide();
        $('#vllm-container').show();
      } else {
        $('#vllm-container').hide();
        $('#model-dropdown-container').show();
        const modelDropdown = $('#model');
        modelDropdown.empty();
        if(modelOptions[selectedProvider]) {
          modelOptions[selectedProvider].forEach(option => {
            modelDropdown.append($('<option>', { value: option.value, text: option.text }));
          });
        }
      }
    }
    updateModelOptions();
    $('#provider').on('change', function () { updateModelOptions(); toggleContextOptionVisibility(); });
    const form = $('#chatbot-form');
    loadValues();
    form.submit(function (e) {
      e.preventDefault();
      const systemMessage = $('#systemMessage').val();
      const numberOfMessages = $('#numberOfMessage').val();
      const provider = $('#provider').val();
      let model = '';
      if(provider === 'vllm'){
        model = $('#vllmModel').val();
      } else if(provider !== 'cohere'){
        model = $('#model').val();
      }
      const apiKey = $('#apiKey').val();
      const contextMode = $('#flexSwitchCheckDefault').prop('checked');
      const oneKey = $('#oneKey').val();
      const searchK = $('#searchK').val();
      if(provider !== 'vllm' && apiKey.trim() === ''){
        $('#apiKey').addClass('is-invalid').siblings('.invalid-feedback').text('API Key cannot be empty.');
        return;
      } else {
        $('#apiKey').removeClass('is-invalid').siblings('.invalid-feedback').text('');
      }
      saveValuesToLocalStorage(systemMessage, numberOfMessages, provider, model, apiKey, contextMode, oneKey, searchK);
      $('.side-bar').removeClass('active');
    });
    $('#resetKeys').click(function () {
      localStorage.removeItem('systemMessage');
      localStorage.removeItem('numberOfMessages');
      localStorage.removeItem('provider');
      localStorage.removeItem('model');
      localStorage.removeItem('apiKey');
      localStorage.removeItem('contextMode');
      localStorage.removeItem('oneKey');
      localStorage.removeItem('searchK');
      localStorage.removeItem('vllmServer');
      localStorage.removeItem('vllmModel');
      form[0].reset();
      $('#apiKey').removeClass('is-invalid').siblings('.invalid-feedback').text('');
    });
    function saveValuesToLocalStorage(systemMessage, numberOfMessages, provider, model, apiKey, contextMode, oneKey, searchK) {
      localStorage.setItem('systemMessage', systemMessage);
      localStorage.setItem('numberOfMessages', numberOfMessages);
      localStorage.setItem('provider', provider);
      if(provider === 'vllm'){
        localStorage.setItem('vllmServer', $('#vllmServer').val());
        localStorage.setItem('vllmModel', model);
        localStorage.setItem('model', model);
      } else {
        localStorage.setItem('model', model);
      }
      localStorage.setItem('apiKey', apiKey);
      localStorage.setItem('contextMode', contextMode);
      if(contextMode && oneKey){
        localStorage.setItem('oneKey', oneKey);
        localStorage.setItem('searchK', searchK);
      } else {
        localStorage.removeItem('oneKey');
        localStorage.removeItem('searchK');
      }
    }
    function loadValues() {
      const savedSystemMessage = localStorage.getItem('systemMessage');
      const savedNumberOfMessages = localStorage.getItem('numberOfMessages');
      const savedProvider = localStorage.getItem('provider');
      const savedModel = localStorage.getItem('model');
      const savedApiKey = localStorage.getItem('apiKey');
      const savedContextMode = localStorage.getItem('contextMode');
      const oneKey = localStorage.getItem('oneKey');
      const searchK = localStorage.getItem('searchK');

      if (savedSystemMessage !== null) {
        $('#systemMessage').val(savedSystemMessage);
      }
      if (savedNumberOfMessages !== null) {
        $('#numberOfMessage').val(savedNumberOfMessages);
      }
      if (savedProvider !== null) {
        $('#provider').val(savedProvider);
      }
      if (savedApiKey !== null) {
        $('#apiKey').val(savedApiKey);
      }
      if (savedContextMode !== null) {
        $('#flexSwitchCheckDefault').prop('checked', savedContextMode === 'true');
      }
      if (oneKey !== null) {
        $('#oneKey').val(oneKey);
      }
      if (searchK !== null) {
        $('#searchK').val(searchK);
      }

      // Rebuild the models for that provider
      updateModelOptions();

      // Set the saved model in the dropdown or the vLLM fields
      if (savedProvider === 'vllm') {
        $('#vllmModel').val(savedModel);
      } else if (savedProvider !== 'cohere' && savedModel) {
        $('#model').val(savedModel);
      }
    }

    function toggleContextOptionVisibility() {
      const providerSelect = document.getElementById('provider');
      const dataOption = document.getElementById('data-option');
      if (providerSelect.value === 'replicate') {
        dataOption.style.display = 'none';
      } else {
        dataOption.style.display = 'flex';
      }
    }
    document.getElementById('provider').addEventListener('change', toggleContextOptionVisibility);
    toggleContextOptionVisibility();
  </script>
  <script>
    var messageHistory = [];
    $(document).ready(function () {
      function toggleButtonState(isEnabled) {
        $('#sendMessage').prop('disabled', !isEnabled)
          .html(isEnabled ? 'Send Message' : '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Sending...');
      }
      function displayErrorMessage(errorMessage) {
        const chatbox = $('#chatbox');
        const errorBubble = $('<div>').addClass('error-bubble').text('Error: ' + errorMessage);
        chatbox.append(errorBubble);
        chatbox.scrollTop(chatbox.prop("scrollHeight"));
      }
      function sendMessageToApi() {
        toggleButtonState(false);
        const userInput = $('#userInput').val();
        if ($.trim(userInput) !== '') {
          const chatbox = $('#chatbox');
          const apiKey = localStorage.getItem('apiKey');
          const provider = localStorage.getItem('provider');
          let model = '';
          if(provider === 'vllm'){
            model = $('#vllmModel').val();
          } else if(provider !== 'cohere'){
            model = localStorage.getItem('model');
          }
          const oneKey = localStorage.getItem('oneKey');
          const systemMessage = localStorage.getItem('systemMessage') || "";
          let searchK = localStorage.getItem('searchK') || 3;
          if(provider !== 'vllm' && !apiKey){
            displayErrorMessage('Please enter a valid API key.');
            toggleButtonState(true);
            return;
          }
          const userBubble = $('<div>').addClass('user-bubble').text(userInput);
          chatbox.append(userBubble);
          const botBubbleBefore = $('<div>').addClass('bot-bubble bot-typing');
          chatbox.append(botBubbleBefore);
          messageHistory.push({ role: "user", content: userInput });
          if(isNaN(Number(searchK)) || Number(searchK) < 1){
            searchK = 3;
          }
          let data = {};
          if(oneKey){
            data = {
              api_key: apiKey,
              one_key: oneKey,
              model: model,
              provider: provider,
              input: {
                system: systemMessage,
                searchK: searchK,
                attachReference: true,
                messages: messageHistory
              }
            };
          } else {
            data = {
              api_key: apiKey,
              model: model,
              provider: provider,
              input: {
                system: systemMessage || "You are a helpful assistant.",
                messages: messageHistory
              }
            };
          }
          if(provider === 'vllm'){
            data.serverLink = $('#vllmServer').val();
          }
          $('#userInput').val('');
          const baseUrl = window.location.origin;
          const apiUrl = `${baseUrl}/chatbot/chat`;
          $.ajax({
            url: apiUrl,
            type: 'POST',
            headers: { 'X-API-KEY': "root", 'Content-Type': 'application/json' },
            data: JSON.stringify(data),
            success: function (response) {
              botBubbleBefore.remove();
              if(response.status === 'ERROR'){
                displayErrorMessage(response.message);
              } else {
                const botResponse = response.data[0];
                messageHistory.push({ role: "assistant", content: botResponse });
                const botResponseLines = botResponse.split('\n');
                const botBubble = $('<div>').addClass('bot-bubble').html(botResponseLines.join('<br>'));
                if(oneKey && response.reference && response.reference.length > 0){
                  const sourceButton = $('<button>').addClass('btn btn-link source-btn')
                    .text('Source').on('click', function () {
                      let sourceDiv = $(this).siblings('.source-list');
                      if(sourceDiv.length){
                        sourceDiv.toggle();
                      } else {
                        sourceDiv = $('<div>').addClass('source-list alert alert-secondary mt-2')
                          .css({ "font-size": "0.85em" })
                          .html("Sources: " + response.reference.join(', '));
                        $(this).after(sourceDiv);
                      }
                    });
                  botBubble.append('<br>').append(sourceButton);
                }
                chatbox.append(botBubble);
                chatbox.scrollTop(chatbox.prop("scrollHeight"));
              }
              toggleButtonState(true);
            },
            error: function (xhr, status, error) {
              console.error('Error:', error);
              displayErrorMessage('An unexpected error occurred.');
              toggleButtonState(true);
            }
          });
        } else {
          toggleButtonState(true);
        }
      }
      $('#userInput').keypress(function (event) {
        if(event.keyCode === 13){
          event.preventDefault();
          sendMessageToApi();
        }
      });
      $('#sendMessage').on('click', function () { sendMessageToApi(); });
      if($('#flexSwitchCheckDefault').is(':checked')){
        $('#additionalOptions').show();
      }
      $('#flexSwitchCheckDefault').change(function () {
        if(this.checked){
          $('#additionalOptions').slideDown();
        } else {
          $('#additionalOptions').slideUp();
        }
      });
      $('#slideBtn').on('click', function () { setTimeout(() => loadValues(), 0); });
    });
  </script>
  <script>
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
      return new bootstrap.Tooltip(tooltipTriggerEl);
    });
    $(".sideBaricon").on("click", function () {
      $(".side-bar").toggleClass("active");
    });
  </script>
</body>
</html>
