// cohere.js
var express = require('express');
var path = require('path');
var router = express.Router();

const { CohereAIWrapper } = require('intellinode');
const { USE_DEFAULT_KEYS } = require(path.join(global.__basedir, 'config'));

function getAPIWrapper(req) {
  if (USE_DEFAULT_KEYS && !req.body.api_key) {
    return new CohereAIWrapper(process.env.COHERE_API_KEY);
  } else {
    return new CohereAIWrapper(req.body.api_key);
  }
}

/**
 * @swagger
 * /cohere/text:
 *   post:
 *     tags:
 *       - Models
 *     summary: Generates text using Cohere's language models.
 *     security:
 *       - ApiKeyAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - api_key
 *               - params
 *             properties:
 *               api_key:
 *                 type: string
 *                 description: The api key for Cohere.
 *               params:
 *                 type: object
 *                 properties:
 *                   model:
 *                     type: string
 *                     description: The language model to use, e.g. 'command'.
 *                   prompt:
 *                     type: string
 *                     description: The prompt to pass to the language model.
 *                   temperature:
 *                     type: float
 *                     description: The randomness parameter for the output generation.
 *                   max_tokens:
 *                     type: integer
 *                     description: The maximum number of tokens to be generated by language model.
 *     responses:
 *       200:
 *         description: The generated text from Cohere.
 *       400:
 *         description: There was a problem with the request.
 */
router.post('/text', async (req, res, next) => {
    try {
        const cohere = getAPIWrapper(req);

        const result = await cohere.generateText(req.body.params);

        res.json({ status: "OK", data: result.generations });

    } catch (error) {
        res.json({ status: "ERROR", message: error.message });
    }
});

/**
 * @swagger
 * /cohere/embeddings:
 *   post:
 *     tags:
 *       - Models
 *     summary: Get embeddings for specified text using Cohere.
 *     security:
 *       - ApiKeyAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - api_key
 *               - params
 *             properties:
 *               api_key:
 *                 type: string
 *                 description: The api key for Cohere.
 *               params:
 *                 type: object
 *                 properties:
 *                   texts:
 *                     type: array
 *                     items:
 *                       type: string
 *                     description: Array of text inputs for which embeddings are generated.
 *                   model:
 *                     type: string
 *                     description: The language model to use for embedding generation.
 *                   truncate:
 *                     type: string
 *                     description: Specifies where to truncate the text when the model's token limit is reached.
 *     responses:
 *       200:
 *         description: The generated embeddings from Cohere.
 *       400:
 *         description: There was a problem with the request.
 */
router.post('/embeddings', async (req, res, next) => {
    try {
        const cohere = getAPIWrapper(req);

        const result = await cohere.getEmbeddings(req.body.params);

        res.json({ status: "OK", data: result.embeddings });
    } catch (error) {
        res.json({ status: "ERROR", message: error.message });
    }
});

module.exports = router;